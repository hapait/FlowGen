{"version":3,"sources":["logo.svg","Components/Basic.js","firebase/index.js","Components/Basic2.js","App.js","reportWebVitals.js","index.js"],"names":["React","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","initialElements","id","type","data","label","position","x","y","onLoad","reactFlowInstance","fitView","Card","useState","elements","setElements","lastId","setLastId","setText","nodeName","setNodeName","imageAsFile","setImageAsFile","imgUrl","imageAsUrl","setImageAsUrl","progress","setProgress","getImageNode","nid","toString","style","flexDirection","justifyContent","src","width","height","alt","right","top","onClick","e","newarr","filter","element","onRemove","className","onChange","target","value","name","color","max","onSubmit","preventDefault","console","log","error","ref","put","on","snapShot","prog","Math","round","bytesTransferred","totalBytes","err","child","getDownloadURL","then","fireBaseUrl","prevObject","image","files","imageFile","lId","parseInt","node","concat","onConnect","params","i","source","s","t","animated","connectionLineStyle","stroke","strokeWidth","connectionLineType","snapToGrid","snapGrid","gap","App","Basic2","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAe,I,uDCiCoBA,IAAMC,U,aCnBvCC,IAASC,cAXU,CACjBC,OAAQ,yCACRC,WAAY,+CACZC,YAAa,sDACbC,UAAW,+BACXC,cAAe,2CACfC,kBAAmB,yCACnBC,MAAO,sCACPC,cAAe,kCAIjB,IAAMC,EAAUV,IAASU,U,QCTrBC,EAAkB,CACpB,CAAEC,GAAI,IAAKC,KAAM,QAASC,KAAM,CAAEC,MAAO,cAAgBC,SAAU,CAAEC,EAAG,EAAGC,EAAG,KAE5EC,EAAS,SAACC,GACZA,EAAkBC,WAmKPC,EAhKF,WAAO,IAAD,EAEiBC,mBAASZ,GAF1B,mBAERa,EAFQ,KAEEC,EAFF,OAIaF,mBAAS,GAJtB,mBAIRG,EAJQ,KAIAC,EAJA,OAKSJ,mBAAS,IALlB,gCAMSA,mBAAS,UANlB,mBAMFK,GANE,aAOqBL,mBAAS,GAP9B,gCAQiBA,mBAAS,QAR1B,mBAQRM,EARQ,KAQEC,EARF,OASYP,mBAAS,IATrB,gCAYuBA,mBAAS,KAZhC,mBAYRQ,EAZQ,KAYKC,EAZL,OAaqBT,mBAFlB,CAAEU,OAAQ,KAXb,mBAaRC,EAbQ,KAaIC,EAbJ,OAciBZ,mBAAS,GAd1B,mBAcRa,EAdQ,KAcEC,EAdF,KA4ETC,EAAe,SAACC,GAClB,IAAItB,EAAIsB,EAAIC,WACZ,OAAO,sBACHC,MAAO,CACHC,cAAe,SACfC,eAAgB,UAHjB,UAKH,4BAAId,IAAa,uBACjB,qBAAKe,IAAKV,EAAWD,OAAQQ,MAAO,CAAEI,MAAO,GAAIC,OAAQ,IAAMC,IAAI,cAKnE,uBACA,wBAAQN,MAAO,CAAEO,MAAO,GAAIC,IAAK,IAAMC,QAAS,SAAAC,GAAC,OApBxC,SAACZ,GAGd,IAAIa,EAAS5B,EAAS6B,QAAO,SAAAC,GAAO,OAAIA,EAAQ1C,KAAO2B,KACvDd,EAAY2B,GAgB6CG,CAAStC,IAA9D,wBA+BR,OACI,eAAC,WAAD,WACI,eAAC,QAAD,WACI,mBAAGuC,UAAU,YAAb,yBACA,uBAAO3C,KAAK,OACR4C,SAAU,SAAAN,GAAC,OAAIrB,EAAYqB,EAAEO,OAAOC,QACpCC,KAAK,YAAYnB,MAAO,CAAEoB,MAAO,UACxB,GAAZzB,GAA6B,KAAZA,EACd,wBAEA,0BAAUuB,MAAOvB,EAAU0B,IAAI,QACnC,uBAAMC,SAhHW,SAAAZ,GACzBA,EAAEa,iBACFC,QAAQC,IAAI,mBAEQ,KAAhBnC,GACAkC,QAAQE,MAAR,mDAA2DpC,IAE5CrB,EAAQ0D,IAAR,kBAAuBrC,EAAY6B,OAAQS,IAAItC,GAEvDuC,GAAG,iBACV,SAACC,GAEGN,QAAQC,IAAIK,GACZ,IAAMC,EAAOC,KAAKC,MAAMH,EAASI,iBAAmBJ,EAASK,WAAa,KAC1EvC,EAAYmC,MACb,SAACK,GAEAZ,QAAQC,IAAIW,MACb,WAGCnE,EAAQ0D,IAAI,UAAUU,MAAM/C,EAAY6B,MAAMmB,iBACzCC,MAAK,SAAAC,GACF9C,GAAc,SAAA+C,GAAU,kCAAUA,GAAV,IAAsBjD,OAAQgD,cAyF9D,UACI,uBACIpE,KAAK,OACL4C,SAvHM,SAACN,GACvB,IAAMgC,EAAQhC,EAAEO,OAAO0B,MAAM,GAC7BpD,GAAe,SAAAqD,GAAS,OAAKF,QAuHjB,2DAGJ,wBAAQ1C,MAAO,CAAEoB,MAAO,QAAUhD,KAAK,SAASqC,QApF3C,WACb,IAAIoC,EAAMC,SAAS,GAAD,OAAI7D,IAClB8D,EAAOlD,EAAagD,EAAM,GAC9B1D,EAAQ0D,GACR3D,EAAU2D,EAAM,GAChB7D,GAAY,SAAA0B,GAAC,OAAIA,EAAEsC,OAAO,CAEtB7E,GAAI0E,EAAM,EAEVxE,KAAM,CAAEC,MAAOyE,GAEfxE,SAAU,CAAEC,EAAGkC,EAAE,GAAGnC,SAASC,EAAI,GAAIC,EAAGiC,EAAE,GAAGnC,SAASE,EAAI,UAyEtD,yBAEJ,eAAC,IAAD,CACIM,SAAUA,EACVL,OAAQA,EACRsB,MAAO,CAAEI,MAAO,OAAQC,OAAQ,QAChC4C,UApDM,SAACC,GAEf,IAAIC,EAAI,IAAMD,EAAOE,OAAOrD,WAAa,IAAMmD,EAAOjC,OAAOlB,WACzDsD,EAAIH,EAAOE,OAAOrD,WAClBuD,EAAIJ,EAAOjC,OAAOlB,WACtBf,GAAY,SAAA0B,GAAC,OAAIA,EAAEsC,OAAO,CACtB7E,GAAIgF,EACJC,OAAQC,EACRpC,OAAQqC,EACRC,UAAU,QA4CNC,oBAAqB,CAAEC,OAAQ,OAAQC,YAAa,GACpDC,mBAAmB,SACnBC,YAAY,EACZC,SAAU,CAAC,GAAI,IARnB,UAUI,cAAC,IAAD,CAAYzC,MAAM,OAAO0C,IAAK,KAC9B,cAAC,IAAD,IACA,cAAC,IAAD,WC9FDC,MAzDf,WAEE,IAFa,EAGyBjF,mBAAS,IAHlC,mBAGNQ,EAHM,aAIuBR,mBAFlB,CAAEU,OAAQ,MAFf,mBAqCb,OArCa,UAMbgC,QAAQC,IAAInC,GAgCV,qBAAKyB,UAAU,MAAf,SAcE,cAACiD,EAAD,OCxDSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a5293d42.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { useState, Fragment } from 'react';\r\nimport ReactFlow, { addEdge, Background, Controls, MiniMap } from 'react-flow-renderer';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport NavigationIcon from '@material-ui/icons/Navigation';\r\n\r\nconst elements = [\r\n    {\r\n        id: '1',\r\n        type: 'input', // input node\r\n        data: { label: 'Input Node' },\r\n        position: { x: 250, y: 25 },\r\n    },\r\n    // default node\r\n    {\r\n        id: '2',\r\n        // you can also pass a React component as a label\r\n        data: { label: <div>Default Node</div> },\r\n        position: { x: 100, y: 125 },\r\n    },\r\n    {\r\n        id: '3',\r\n        type: 'output', // output node\r\n        data: { label: 'Output Node' },\r\n        position: { x: 250, y: 250 },\r\n    },\r\n    // animated edge\r\n    { id: 'e1-2', source: '1', target: '2', animated: true },\r\n    { id: 'e2-3', source: '2', target: '3' },\r\n];\r\n\r\nexport default class Basic extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(\"hello \");\r\n        this.state = {\r\n            text: \"blank\",\r\n            nodes: [\r\n                {\r\n                    id: '1',\r\n                    type: 'input', // input node\r\n                    data: { label: 'Input Node' },\r\n                    position: { x: 250, y: 25 },\r\n                },\r\n                // default node\r\n                {\r\n                    id: '2',\r\n                    // you can also pass a React component as a label\r\n                    data: { label: <div>Default Node</div> },\r\n                    position: { x: 100, y: 125 },\r\n                },\r\n                {\r\n                    id: '3',\r\n                    type: 'output', // output node\r\n                    data: { label: 'Output Node' },\r\n                    position: { x: 250, y: 250 },\r\n                },\r\n                // animated edge\r\n                { id: 'e1-2', source: '1', target: '2', animated: true },\r\n                { id: 'e2-3', source: '2', target: '3' },\r\n            ],\r\n            nodes2: [\r\n                {\r\n                    id: '1',\r\n                    type: 'input', // input node\r\n                    data: { label: 'Input Node' },\r\n                    position: { x: 250, y: 25 },\r\n                }\r\n            ],\r\n            temp: {},\r\n        };\r\n        this.addNode = this.addNode.bind(this);\r\n    }\r\n\r\n    addNode = () => {\r\n        //console.log(\"adding\");\r\n        \r\n        //this.setState({text: \"clicked\"});\r\n        /*\r\n        var id = '4';\r\n        var type = 'default';\r\n        var data = <div><h1>Hello</h1></div>;\r\n        var position = { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight };\r\n        let temp = { id: id, type: type, data: data, position: position };\r\n        */\r\n        //this.setState({temp: temp});\r\n        var joined = this.state.nodes2.concat({\r\n            id: '2',\r\n            type: 'input', // input node\r\n            data: { label: 'Input Node' },\r\n            position: { x: 250, y: 25 },\r\n        });\r\n        /*\r\n        this.state.nodes2.concat({\r\n            id: '2',\r\n            type: 'input', // input node\r\n            data: { label: 'Input Node' },\r\n            position: { x: 250, y: 25 },\r\n        });\r\n        */\r\n        this.setState({ nodes2: joined });\r\n        //this.setState({nodes2: [...this.state.nodes2, temp]});\r\n        //console.log(this.state.nodes2);\r\n    }\r\n\r\n    render() {\r\n        return <Fragment>\r\n            <ReactFlow\r\n                //elements={elements}\r\n                elements={this.state.nodes2}\r\n                //onLoad={onLoad}\r\n                style={{ width: '100%', height: '90vh' }}\r\n                //onConnect={onConnect}\r\n                connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n                connectionLineType=\"bezier\"\r\n                snapToGrid={true}\r\n                snapGrid={[16, 16]}\r\n            >\r\n                <Background color=\"#888\" gap={16} />\r\n                <MiniMap />\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            <div>\r\n                <input type=\"text\"\r\n                    //onChange={e => setName(e.target.value)}\r\n                    name=\"title\" />\r\n                <button\r\n                    style={{ right: 20, top: 80 }}\r\n                    type=\"button\"\r\n                    onClick={this.addNode}\r\n                    //onClick={() => this.setState({text: \"clicked\"})}\r\n                >Add Node</button>\r\n                <h1>{this.state.text}</h1>\r\n                \r\n            </div>\r\n        </Fragment>\r\n    }\r\n}","import firebase from 'firebase/app'\r\nimport 'firebase/storage'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"super secret keys.....asgvegxgevergfvr\",\r\n    authDomain: \"tallans-imageupload-tutorial.firebaseapp.com\",\r\n    databaseURL: \"https://tallans-imageupload-tutorial.firebaseio.com\",\r\n    projectId: \"tallans-imageupload-tutorial\",\r\n    storageBucket: \"tallans-imageupload-tutorial.appspot.com\",\r\n    messagingSenderId: \"super secret keys.....asgvegxgevergfvr\",\r\n    appId: \"super secret app id....adsfa;lsdkjf\",\r\n    measurementId: \"super secret as;dlkfjal;dskjf\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  const storage = firebase.storage()\r\n\r\n\r\n//analytics is optional for this tutoral \r\n  //firebase.analytics();\r\n\r\n  export  {\r\n    storage, firebase as default\r\n  }\r\n ","import React, { useState, Fragment } from 'react';\r\nimport { storage } from '../firebase';\r\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, getBezierPath, getMarkerEnd } from 'react-flow-renderer';\r\nimport Sidebar from './Sidebar';\r\nimport { slide as Menu } from 'react-burger-menu';\r\n\r\nconst initialElements = [\r\n    { id: '1', type: 'input', data: { label: 'Start Node' }, position: { x: 0, y: 0 } }\r\n]\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst Card = () => {\r\n\r\n    const [elements, setElements] = useState(initialElements);\r\n    //const [elements, setElements] = useState([]);\r\n    const [lastId, setLastId] = useState(1);\r\n    const [name, setName] = useState(\"\")\r\n    const [text, setText] = useState(\"blank\");\r\n    const [removingId, setRemovingId] = useState(0);\r\n    const [nodeName, setNodeName] = useState(\"new\");\r\n    const [images, setImage] = useState([]);\r\n\r\n    const allInputs = { imgUrl: '' }\r\n    const [imageAsFile, setImageAsFile] = useState('')\r\n    const [imageAsUrl, setImageAsUrl] = useState(allInputs);\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    const handleImageAsFile = (e) => {\r\n        const image = e.target.files[0]\r\n        setImageAsFile(imageFile => (image))\r\n    }\r\n    const handleFireBaseUpload = e => {\r\n        e.preventDefault()\r\n        console.log('start of upload')\r\n        // async magic goes here...\r\n        if (imageAsFile === '') {\r\n            console.error(`not an image, the image file is a ${typeof (imageAsFile)}`)\r\n        }\r\n        const uploadTask = storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile)\r\n        //initiates the firebase side uploading \r\n        uploadTask.on('state_changed',\r\n            (snapShot) => {\r\n                //takes a snap shot of the process as it is happening\r\n                console.log(snapShot)\r\n                const prog = Math.round(snapShot.bytesTransferred / snapShot.totalBytes * 100);\r\n                setProgress(prog);\r\n            }, (err) => {\r\n                //catches the errors\r\n                console.log(err)\r\n            }, () => {\r\n                // gets the functions from storage refences the image storage in firebase by the children\r\n                // gets the download url then sets the image from firebase as the value for the imgUrl key:\r\n                storage.ref('images').child(imageAsFile.name).getDownloadURL()\r\n                    .then(fireBaseUrl => {\r\n                        setImageAsUrl(prevObject => ({ ...prevObject, imgUrl: fireBaseUrl }))\r\n                    })\r\n            })\r\n    }\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            //id: (e.length + 1).toString(),\r\n            id: lastId + 1,\r\n            data: { label: `${name}` },\r\n            position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n        }));\r\n    };\r\n    const addNode2 = () => {\r\n        var lId = parseInt(`${lastId}`);\r\n        var node = getImageNode(lId + 1);\r\n        setText(lId);\r\n        setLastId(lId + 1);\r\n        setElements(e => e.concat({\r\n            //id: (e.length + 1).toString(),\r\n            id: lId + 1,\r\n            //data: { label: <div><h1>Hello</h1></div> },\r\n            data: { label: node },\r\n            //position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n            position: { x: e[0].position.x + 50, y: e[0].position.y + 50 }\r\n        }));\r\n    };\r\n    const onRemove = (nid) => {\r\n        //alert(nid.toString());\r\n        //setText(\"removing\" + nid.toString());\r\n        var newarr = elements.filter(element => element.id !== nid);\r\n        setElements(newarr);\r\n    };\r\n    const getImageNode = (nid) => {\r\n        var x = nid.toString();\r\n        return <div\r\n            style={{\r\n                flexDirection: 'column',\r\n                justifyContent: \"center\",\r\n            }}>\r\n            <a>{nodeName}</a><hr />\r\n            <img src={imageAsUrl.imgUrl} style={{ width: 80, height: 80 }} alt=\"image tag\" />\r\n            {\r\n                //images[0].name\r\n                //images.map((item,i) => <li key={i}>Test</li>)\r\n            }\r\n            <hr />\r\n            <button style={{ right: 10, top: 10 }} onClick={e => onRemove(x)}>Delete</button>\r\n        </div>\r\n    };\r\n\r\n    const onConnect = (params) => {\r\n        //setText(params.source.toString() + params.target.toString());\r\n        var i = 'e' + params.source.toString() + '-' + params.target.toString();\r\n        var s = params.source.toString();\r\n        var t = params.target.toString();\r\n        setElements(e => e.concat({\r\n            id: i,\r\n            source: s,\r\n            target: t,\r\n            animated: true\r\n        }));\r\n    }\r\n    const selectImage = (params) => {\r\n        //setText(params.source.toString() + params.target.toString());\r\n        var i = 'e' + params.source.toString() + '-' + params.target.toString();\r\n        var s = params.source.toString();\r\n        var t = params.target.toString();\r\n        setElements(e => e.concat({\r\n            id: i,\r\n            source: s,\r\n            target: t,\r\n            animated: true\r\n        }));\r\n    }\r\n    const handleClick = (e) => {\r\n        this.refs.fileUploader.click();\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <Menu>\r\n                <a className=\"menu-item\">Create Node</a>\r\n                <input type=\"text\"\r\n                    onChange={e => setNodeName(e.target.value)}\r\n                    name=\"Node Name\" style={{ color: '#000' }} />\r\n                {progress == 0 || progress == 100 ?\r\n                    <div></div>\r\n                    :\r\n                    <progress value={progress} max=\"100\"></progress>}\r\n                <form onSubmit={handleFireBaseUpload}>\r\n                    <input\r\n                        type=\"file\"\r\n                        onChange={handleImageAsFile}\r\n                    />\r\n                    <button>upload to firebase</button>\r\n                </form>\r\n\r\n                <button style={{ color: '#000' }} type=\"button\" onClick={addNode2}>Add Node</button>\r\n            </Menu>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{ width: '100%', height: '90vh' }}\r\n                onConnect={onConnect}\r\n                connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n                connectionLineType=\"bezier\"\r\n                snapToGrid={true}\r\n                snapGrid={[16, 16]}\r\n            >\r\n                <Background color=\"#888\" gap={16} />\r\n                <MiniMap />\r\n                <Controls />\r\n            </ReactFlow>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Card;","import logo from './logo.svg';\nimport './App.css';\nimport Basic from './Components/Basic';\nimport Basic2 from './Components/Basic2';\nimport Basic3 from './Components/Basic3';\nimport ReactFlow from 'react-flow-renderer';\nimport CustomNodeFlow from './Components/CustomNode';\nimport SideBar from './Components/Sidebar';\nimport React, { useState, Fragment } from 'react';\nimport Mix from './Components/Mix';\n//import {storage, firebase} from './firebase/firebase';\nimport {storage} from './firebase';\nconst initialElements = [\n  { id: '1', type: 'input', data: { label: 'Mind Node' }, position: { x: 0, y: 0 } }\n]\n\nfunction App() {\n  //const [elements, setElements] = useState(initialElements);\n  const allInputs = { imgUrl: '' }\n  const [imageAsFile, setImageAsFile] = useState('')\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs)\n\n  console.log(imageAsFile)\n  const handleImageAsFile = (e) => {\n    const image = e.target.files[0]\n    setImageAsFile(imageFile => (image))\n  }\n  const handleFireBaseUpload = e => {\n    e.preventDefault()\n    console.log('start of upload')\n    // async magic goes here...\n    if (imageAsFile === '') {\n      console.error(`not an image, the image file is a ${typeof (imageAsFile)}`)\n    }\n    const uploadTask = storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile)\n    //initiates the firebase side uploading \n    uploadTask.on('state_changed',\n      (snapShot) => {\n        //takes a snap shot of the process as it is happening\n        console.log(snapShot)\n      }, (err) => {\n        //catches the errors\n        console.log(err)\n      }, () => {\n        // gets the functions from storage refences the image storage in firebase by the children\n        // gets the download url then sets the image from firebase as the value for the imgUrl key:\n        storage.ref('images').child(imageAsFile.name).getDownloadURL()\n          .then(fireBaseUrl => {\n            setImageAsUrl(prevObject => ({ ...prevObject, imgUrl: fireBaseUrl }))\n          })\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        //<CustomNodeFlow/>\n        //<Mix/>\n        //\n      }\n      {/* <form onSubmit={handleFireBaseUpload}>\n        <input\n          type=\"file\"\n          onChange={handleImageAsFile}\n        />\n        <button>upload to firebase</button>\n      </form>\n      <img src={imageAsUrl.imgUrl} alt=\"image tag\" /> */}\n      <Basic2/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}