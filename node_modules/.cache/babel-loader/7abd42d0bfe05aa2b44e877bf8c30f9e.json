{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Shaft\\\\Desktop\\\\flow\\\\flowgen2\\\\src\\\\Components\\\\Basic2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, getBezierPath, getMarkerEnd } from 'react-flow-renderer';\nimport Sidebar from './Sidebar';\nimport { slide as Menu } from 'react-burger-menu';\nconst initialElements = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'Mind Node'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}];\n\nconst onLoad = reactFlowInstance => {\n  reactFlowInstance.fitView();\n};\n\nconst Card = () => {\n  _s();\n\n  const [elements, setElements] = useState(initialElements); //const [elements, setElements] = useState([]);\n\n  const [lastId, setLastId] = useState(1);\n  const [name, setName] = useState(\"\");\n  const [text, setText] = useState(\"blank\");\n  const [removingId, setRemovingId] = useState(0);\n  const [nodeName, setNodeName] = useState(\"new\");\n\n  const addNode = () => {\n    setElements(e => e.concat({\n      //id: (e.length + 1).toString(),\n      id: lastId + 1,\n      data: {\n        label: `${name}`\n      },\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }\n    }));\n  };\n\n  const addNode2 = () => {\n    var lId = parseInt(`${lastId}`);\n    var node = getImageNode(lId + 1);\n    setText(lId);\n    setLastId(lId + 1);\n    setElements(e => e.concat({\n      //id: (e.length + 1).toString(),\n      id: lId + 1,\n      //data: { label: <div><h1>Hello</h1></div> },\n      data: {\n        label: node\n      },\n      //position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\n      position: {\n        x: e[0].position.x + 50,\n        y: e[0].position.y + 50\n      }\n    }));\n  };\n\n  const onRemove = nid => {\n    //alert(nid.toString());\n    //setText(\"removing\" + nid.toString());\n    var newarr = elements.filter(element => element.id !== nid);\n    setElements(newarr);\n  };\n\n  const getImageNode = (nid, nn) => {\n    var x = nid.toString();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexDirection: 'row',\n        justifyContent: \"space-between\",\n        justifyItems: 'stretch'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        children: [\"Node \", nid]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        children: nn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          right: 10,\n          top: 10\n        },\n        onClick: e => onRemove(x),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 16\n    }, this);\n  };\n\n  const onConnect = params => {\n    //setText(params.source.toString() + params.target.toString());\n    var i = 'e' + params.source.toString() + '-' + params.target.toString();\n    var s = params.source.toString();\n    var t = params.target.toString();\n    setElements(e => e.concat({\n      id: i,\n      source: s,\n      target: t,\n      animated: true\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Menu, {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"menu-item\",\n        children: \"Create Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setNodeName(e.target.value),\n        name: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addNode2,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: elements,\n      onLoad: onLoad,\n      style: {\n        width: '100%',\n        height: '90vh'\n      },\n      onConnect: onConnect,\n      connectionLineStyle: {\n        stroke: \"#ddd\",\n        strokeWidth: 2\n      },\n      connectionLineType: \"bezier\",\n      snapToGrid: true,\n      snapGrid: [16, 16],\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#888\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setName(e.target.value),\n        name: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addNode2,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: nodeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Card, \"yV6Rh9IkFb0oSDUqrLsc3CUlhTw=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["C:/Users/Shaft/Desktop/flow/flowgen2/src/Components/Basic2.js"],"names":["React","useState","Fragment","ReactFlow","addEdge","Background","Controls","MiniMap","getBezierPath","getMarkerEnd","Sidebar","slide","Menu","initialElements","id","type","data","label","position","x","y","onLoad","reactFlowInstance","fitView","Card","elements","setElements","lastId","setLastId","name","setName","text","setText","removingId","setRemovingId","nodeName","setNodeName","addNode","e","concat","Math","random","window","innerWidth","innerHeight","addNode2","lId","parseInt","node","getImageNode","onRemove","nid","newarr","filter","element","nn","toString","flexDirection","justifyContent","justifyItems","right","top","onConnect","params","i","source","target","s","t","animated","value","width","height","stroke","strokeWidth"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react';\r\n\r\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, getBezierPath, getMarkerEnd } from 'react-flow-renderer';\r\nimport Sidebar from './Sidebar';\r\nimport { slide as Menu } from 'react-burger-menu';\r\n\r\nconst initialElements = [\r\n    { id: '1', type: 'input', data: { label: 'Mind Node' }, position: { x: 0, y: 0 } }\r\n]\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst Card = () => {\r\n\r\n    const [elements, setElements] = useState(initialElements);\r\n    //const [elements, setElements] = useState([]);\r\n    const [lastId, setLastId] = useState(1);\r\n    const [name, setName] = useState(\"\")\r\n    const [text, setText] = useState(\"blank\");\r\n    const [removingId, setRemovingId] = useState(0);\r\n    const [nodeName, setNodeName] = useState(\"new\");\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            //id: (e.length + 1).toString(),\r\n            id: lastId + 1,\r\n            data: { label: `${name}` },\r\n            position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n        }));\r\n    };\r\n    const addNode2 = () => {\r\n        var lId = parseInt(`${lastId}`);\r\n        var node = getImageNode(lId + 1);\r\n        setText(lId);\r\n        setLastId(lId + 1);\r\n        setElements(e => e.concat({\r\n            //id: (e.length + 1).toString(),\r\n            id: lId + 1,\r\n            //data: { label: <div><h1>Hello</h1></div> },\r\n            data: { label: node },\r\n            //position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n            position: { x: e[0].position.x + 50, y: e[0].position.y + 50 }\r\n        }));\r\n    };\r\n    const onRemove = (nid) => {\r\n        //alert(nid.toString());\r\n        //setText(\"removing\" + nid.toString());\r\n        var newarr = elements.filter(element => element.id !== nid);\r\n        setElements(newarr);\r\n    };\r\n    const getImageNode = (nid, nn) => {\r\n        var x = nid.toString();\r\n        return <div style={{ flexDirection: 'row', justifyContent: \"space-between\", justifyItems: 'stretch' }}>\r\n            <a>Node {nid}</a>\r\n            <a>{nn}</a>\r\n            <button style={{ right: 10, top: 10 }} onClick={e => onRemove(x)}>Delete</button>\r\n        </div>\r\n    };\r\n\r\n    const onConnect = (params) => {\r\n        //setText(params.source.toString() + params.target.toString());\r\n        var i = 'e' + params.source.toString() + '-' + params.target.toString();\r\n        var s = params.source.toString();\r\n        var t = params.target.toString();\r\n        setElements(e => e.concat({\r\n            id: i,\r\n            source: s,\r\n            target: t,\r\n            animated: true\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Menu>\r\n                <a className=\"menu-item\">Create Node</a>\r\n                <input type=\"text\"\r\n                    onChange={e => setNodeName(e.target.value)}\r\n                    name=\"title\" />\r\n                <button type=\"button\" onClick={addNode2}>Add Node</button>\r\n            </Menu>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{ width: '100%', height: '90vh' }}\r\n                onConnect={onConnect}\r\n                connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n                connectionLineType=\"bezier\"\r\n                snapToGrid={true}\r\n                snapGrid={[16, 16]}\r\n            >\r\n                <Background color=\"#888\" gap={16} />\r\n                <MiniMap />\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            <div>\r\n                <input type=\"text\"\r\n                    onChange={e => setName(e.target.value)}\r\n                    name=\"title\" />\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={addNode}\r\n                >Add Node</button>\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={addNode2}\r\n                >Add Node</button>\r\n                <h1>{nodeName}</h1>\r\n            </div>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Card;"]},"metadata":{},"sourceType":"module"}