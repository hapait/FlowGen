{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Shaft\\\\Desktop\\\\flow\\\\flowgen2\\\\src\\\\Components\\\\Basic2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment } from 'react';\nimport { storage } from '../firebase';\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, getBezierPath, getMarkerEnd } from 'react-flow-renderer';\nimport Sidebar from './Sidebar';\nimport { slide as Menu } from 'react-burger-menu';\nconst initialElements = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'Start Node'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}];\n\nconst onLoad = reactFlowInstance => {\n  reactFlowInstance.fitView();\n};\n\nconst Card = () => {\n  _s();\n\n  const [elements, setElements] = useState(initialElements); //const [elements, setElements] = useState([]);\n\n  const [lastId, setLastId] = useState(1);\n  const [name, setName] = useState(\"\");\n  const [text, setText] = useState(\"blank\");\n  const [removingId, setRemovingId] = useState(0);\n  const [nodeName, setNodeName] = useState(\"new\");\n  const [images, setImage] = useState([]);\n  const allInputs = {\n    imgUrl: ''\n  };\n  const [imageAsFile, setImageAsFile] = useState('');\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs);\n  const [progress, setProgress] = useState(0);\n\n  const handleImageAsFile = e => {\n    const image = e.target.files[0];\n    setImageAsFile(imageFile => image);\n  };\n\n  const handleFireBaseUpload = e => {\n    e.preventDefault();\n    console.log('start of upload'); // async magic goes here...\n\n    if (imageAsFile === '') {\n      console.error(`not an image, the image file is a ${typeof imageAsFile}`);\n    }\n\n    const uploadTask = storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile); //initiates the firebase side uploading \n\n    uploadTask.on('state_changed', snapShot => {\n      //takes a snap shot of the process as it is happening\n      console.log(snapShot);\n      const progress = Math.round(snapShot.bytesTransferred / snapShot.totalBytes * 100);\n    }, err => {\n      //catches the errors\n      console.log(err);\n    }, () => {\n      // gets the functions from storage refences the image storage in firebase by the children\n      // gets the download url then sets the image from firebase as the value for the imgUrl key:\n      storage.ref('images').child(imageAsFile.name).getDownloadURL().then(fireBaseUrl => {\n        setImageAsUrl(prevObject => ({ ...prevObject,\n          imgUrl: fireBaseUrl\n        }));\n      });\n    });\n  };\n\n  const addNode = () => {\n    setElements(e => e.concat({\n      //id: (e.length + 1).toString(),\n      id: lastId + 1,\n      data: {\n        label: `${name}`\n      },\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }\n    }));\n  };\n\n  const addNode2 = () => {\n    var lId = parseInt(`${lastId}`);\n    var node = getImageNode(lId + 1);\n    setText(lId);\n    setLastId(lId + 1);\n    setElements(e => e.concat({\n      //id: (e.length + 1).toString(),\n      id: lId + 1,\n      //data: { label: <div><h1>Hello</h1></div> },\n      data: {\n        label: node\n      },\n      //position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\n      position: {\n        x: e[0].position.x + 50,\n        y: e[0].position.y + 50\n      }\n    }));\n  };\n\n  const onRemove = nid => {\n    //alert(nid.toString());\n    //setText(\"removing\" + nid.toString());\n    var newarr = elements.filter(element => element.id !== nid);\n    setElements(newarr);\n  };\n\n  const getImageNode = nid => {\n    var x = nid.toString();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexDirection: 'column',\n        justifyContent: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        children: nodeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageAsUrl.imgUrl,\n        style: {\n          width: 80,\n          height: 80\n        },\n        alt: \"image tag\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          right: 10,\n          top: 10\n        },\n        onClick: e => onRemove(x),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 16\n    }, this);\n  };\n\n  const onConnect = params => {\n    //setText(params.source.toString() + params.target.toString());\n    var i = 'e' + params.source.toString() + '-' + params.target.toString();\n    var s = params.source.toString();\n    var t = params.target.toString();\n    setElements(e => e.concat({\n      id: i,\n      source: s,\n      target: t,\n      animated: true\n    }));\n  };\n\n  const selectImage = params => {\n    //setText(params.source.toString() + params.target.toString());\n    var i = 'e' + params.source.toString() + '-' + params.target.toString();\n    var s = params.source.toString();\n    var t = params.target.toString();\n    setElements(e => e.concat({\n      id: i,\n      source: s,\n      target: t,\n      animated: true\n    }));\n  };\n\n  const handleClick = e => {\n    this.refs.fileUploader.click();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Menu, {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"menu-item\",\n        children: \"Create Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setNodeName(e.target.value),\n        name: \"Node Name\",\n        style: {\n          color: '#000'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), progress == 0 ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 33\n      }, this) : /*#__PURE__*/_jsxDEV(\"progress\", {\n        value: progress,\n        max: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 46\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleFireBaseUpload,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleImageAsFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"upload to firebase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          color: '#000'\n        },\n        type: \"button\",\n        onClick: addNode2,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: elements,\n      onLoad: onLoad,\n      style: {\n        width: '100%',\n        height: '90vh'\n      },\n      onConnect: onConnect,\n      connectionLineStyle: {\n        stroke: \"#ddd\",\n        strokeWidth: 2\n      },\n      connectionLineType: \"bezier\",\n      snapToGrid: true,\n      snapGrid: [16, 16],\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#888\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Card, \"WAlzQroSkZXa9oEM1hBJ/AtQE6o=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["C:/Users/Shaft/Desktop/flow/flowgen2/src/Components/Basic2.js"],"names":["React","useState","Fragment","storage","ReactFlow","addEdge","Background","Controls","MiniMap","getBezierPath","getMarkerEnd","Sidebar","slide","Menu","initialElements","id","type","data","label","position","x","y","onLoad","reactFlowInstance","fitView","Card","elements","setElements","lastId","setLastId","name","setName","text","setText","removingId","setRemovingId","nodeName","setNodeName","images","setImage","allInputs","imgUrl","imageAsFile","setImageAsFile","imageAsUrl","setImageAsUrl","progress","setProgress","handleImageAsFile","e","image","target","files","imageFile","handleFireBaseUpload","preventDefault","console","log","error","uploadTask","ref","put","on","snapShot","Math","round","bytesTransferred","totalBytes","err","child","getDownloadURL","then","fireBaseUrl","prevObject","addNode","concat","random","window","innerWidth","innerHeight","addNode2","lId","parseInt","node","getImageNode","onRemove","nid","newarr","filter","element","toString","flexDirection","justifyContent","width","height","right","top","onConnect","params","i","source","s","t","animated","selectImage","handleClick","refs","fileUploader","click","value","color","stroke","strokeWidth"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react';\r\nimport { storage } from '../firebase';\r\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, getBezierPath, getMarkerEnd } from 'react-flow-renderer';\r\nimport Sidebar from './Sidebar';\r\nimport { slide as Menu } from 'react-burger-menu';\r\n\r\nconst initialElements = [\r\n    { id: '1', type: 'input', data: { label: 'Start Node' }, position: { x: 0, y: 0 } }\r\n]\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst Card = () => {\r\n\r\n    const [elements, setElements] = useState(initialElements);\r\n    //const [elements, setElements] = useState([]);\r\n    const [lastId, setLastId] = useState(1);\r\n    const [name, setName] = useState(\"\")\r\n    const [text, setText] = useState(\"blank\");\r\n    const [removingId, setRemovingId] = useState(0);\r\n    const [nodeName, setNodeName] = useState(\"new\");\r\n    const [images, setImage] = useState([]);\r\n\r\n    const allInputs = { imgUrl: '' }\r\n    const [imageAsFile, setImageAsFile] = useState('')\r\n    const [imageAsUrl, setImageAsUrl] = useState(allInputs);\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    const handleImageAsFile = (e) => {\r\n        const image = e.target.files[0]\r\n        setImageAsFile(imageFile => (image))\r\n    }\r\n    const handleFireBaseUpload = e => {\r\n        e.preventDefault()\r\n        console.log('start of upload')\r\n        // async magic goes here...\r\n        if (imageAsFile === '') {\r\n            console.error(`not an image, the image file is a ${typeof (imageAsFile)}`)\r\n        }\r\n        const uploadTask = storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile)\r\n        //initiates the firebase side uploading \r\n        uploadTask.on('state_changed',\r\n            (snapShot) => {\r\n                //takes a snap shot of the process as it is happening\r\n                console.log(snapShot)\r\n                const progress = Math.round(snapShot.bytesTransferred/snapShot.totalBytes * 100);\r\n                \r\n            }, (err) => {\r\n                //catches the errors\r\n                console.log(err)\r\n            }, () => {\r\n                // gets the functions from storage refences the image storage in firebase by the children\r\n                // gets the download url then sets the image from firebase as the value for the imgUrl key:\r\n                storage.ref('images').child(imageAsFile.name).getDownloadURL()\r\n                    .then(fireBaseUrl => {\r\n                        setImageAsUrl(prevObject => ({ ...prevObject, imgUrl: fireBaseUrl }))\r\n                    })\r\n            })\r\n    }\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            //id: (e.length + 1).toString(),\r\n            id: lastId + 1,\r\n            data: { label: `${name}` },\r\n            position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n        }));\r\n    };\r\n    const addNode2 = () => {\r\n        var lId = parseInt(`${lastId}`);\r\n        var node = getImageNode(lId + 1);\r\n        setText(lId);\r\n        setLastId(lId + 1);\r\n        setElements(e => e.concat({\r\n            //id: (e.length + 1).toString(),\r\n            id: lId + 1,\r\n            //data: { label: <div><h1>Hello</h1></div> },\r\n            data: { label: node },\r\n            //position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n            position: { x: e[0].position.x + 50, y: e[0].position.y + 50 }\r\n        }));\r\n    };\r\n    const onRemove = (nid) => {\r\n        //alert(nid.toString());\r\n        //setText(\"removing\" + nid.toString());\r\n        var newarr = elements.filter(element => element.id !== nid);\r\n        setElements(newarr);\r\n    };\r\n    const getImageNode = (nid) => {\r\n        var x = nid.toString();\r\n        return <div\r\n            style={{\r\n                flexDirection: 'column',\r\n                justifyContent: \"center\",\r\n            }}>\r\n            <a>{nodeName}</a><hr />\r\n            <img src={imageAsUrl.imgUrl} style={{width:80, height: 80}}alt=\"image tag\" />\r\n            {\r\n                //images[0].name\r\n                //images.map((item,i) => <li key={i}>Test</li>)\r\n            }\r\n            <hr />\r\n            <button style={{ right: 10, top: 10 }} onClick={e => onRemove(x)}>Delete</button>\r\n        </div>\r\n    };\r\n\r\n    const onConnect = (params) => {\r\n        //setText(params.source.toString() + params.target.toString());\r\n        var i = 'e' + params.source.toString() + '-' + params.target.toString();\r\n        var s = params.source.toString();\r\n        var t = params.target.toString();\r\n        setElements(e => e.concat({\r\n            id: i,\r\n            source: s,\r\n            target: t,\r\n            animated: true\r\n        }));\r\n    }\r\n    const selectImage = (params) => {\r\n        //setText(params.source.toString() + params.target.toString());\r\n        var i = 'e' + params.source.toString() + '-' + params.target.toString();\r\n        var s = params.source.toString();\r\n        var t = params.target.toString();\r\n        setElements(e => e.concat({\r\n            id: i,\r\n            source: s,\r\n            target: t,\r\n            animated: true\r\n        }));\r\n    }\r\n    const handleClick = (e) => {\r\n        this.refs.fileUploader.click();\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <Menu>\r\n                <a className=\"menu-item\">Create Node</a>\r\n                <input type=\"text\"\r\n                    onChange={e => setNodeName(e.target.value)}\r\n                    name=\"Node Name\" style={{ color: '#000' }} />\r\n                {progress == 0? <div></div>: <progress value={progress} max=\"100\"></progress>}\r\n                <form onSubmit={handleFireBaseUpload}>\r\n                    <input\r\n                        type=\"file\"\r\n                        onChange={handleImageAsFile}\r\n                    />\r\n                    <button>upload to firebase</button>\r\n                </form>\r\n\r\n                <button style={{ color: '#000' }} type=\"button\" onClick={addNode2}>Add Node</button>\r\n            </Menu>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{ width: '100%', height: '90vh' }}\r\n                onConnect={onConnect}\r\n                connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n                connectionLineType=\"bezier\"\r\n                snapToGrid={true}\r\n                snapGrid={[16, 16]}\r\n            >\r\n                <Background color=\"#888\" gap={16} />\r\n                <MiniMap />\r\n                <Controls />\r\n            </ReactFlow>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Card;"]},"metadata":{},"sourceType":"module"}