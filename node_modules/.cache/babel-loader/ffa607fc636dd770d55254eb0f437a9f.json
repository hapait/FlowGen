{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Shaft\\\\Desktop\\\\flow\\\\flowgen2\\\\src\\\\Components\\\\CustomNode.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ReactFlow, { isEdge, removeElements, addEdge, MiniMap, Controls } from 'react-flow-renderer';\nimport ColorSelectorNode from './ColorSelectorNode';\nimport '../index.css';\n\nconst onLoad = reactFlowInstance => {\n  console.log('flow loaded:', reactFlowInstance);\n  setTimeout(() => reactFlowInstance.fitView(), 1);\n};\n\nconst onNodeDragStop = (event, node) => console.log('drag stop', node);\n\nconst onElementClick = (event, element) => console.log('click', element);\n\nconst initBgColor = '#1A192B';\nconst connectionLineStyle = {\n  stroke: '#fff'\n};\nconst snapGrid = [20, 20];\nconst nodeTypes = {\n  selectorNode: ColorSelectorNode\n};\n\nconst CustomNodeFlow = () => {\n  _s();\n\n  const [elements, setElements] = useState([]);\n  const [bgColor, setBgColor] = useState(initBgColor);\n  useEffect(() => {\n    const onChange = event => {\n      setElements(els => els.map(e => {\n        if (isEdge(e) || e.id !== '2') {\n          return e;\n        }\n\n        const color = event.target.value;\n        setBgColor(color);\n        return { ...e,\n          data: { ...e.data,\n            color\n          }\n        };\n      }));\n    };\n\n    setElements([{\n      id: '1',\n      type: 'input',\n      data: {\n        label: 'An input node'\n      },\n      position: {\n        x: 0,\n        y: 50\n      },\n      sourcePosition: 'right'\n    }, {\n      id: '2',\n      type: 'selectorNode',\n      data: {\n        onChange: onChange,\n        color: initBgColor\n      },\n      style: {\n        border: '1px solid #777',\n        padding: 10\n      },\n      position: {\n        x: 300,\n        y: 50\n      }\n    }, {\n      id: '3',\n      type: 'output',\n      data: {\n        label: 'Output A'\n      },\n      position: {\n        x: 650,\n        y: 25\n      },\n      targetPosition: 'left'\n    }, {\n      id: '4',\n      type: 'output',\n      data: {\n        label: 'Output B'\n      },\n      position: {\n        x: 650,\n        y: 100\n      },\n      targetPosition: 'left'\n    }, {\n      id: 'e1-2',\n      source: '1',\n      target: '2',\n      animated: true,\n      style: {\n        stroke: '#fff'\n      }\n    }, {\n      id: 'e2a-3',\n      source: '2',\n      target: '3',\n      sourceHandle: 'a',\n      animated: true,\n      style: {\n        stroke: '#fff'\n      }\n    }, {\n      id: 'e2b-4',\n      source: '2',\n      target: '4',\n      sourceHandle: 'b',\n      animated: true,\n      style: {\n        stroke: '#fff'\n      }\n    }]);\n  }, []);\n\n  const onElementsRemove = elementsToRemove => setElements(els => removeElements(elementsToRemove, els));\n\n  const onConnect = params => setElements(els => addEdge({ ...params,\n    animated: true,\n    style: {\n      stroke: '#fff'\n    }\n  }, els));\n\n  return /*#__PURE__*/_jsxDEV(ReactFlow, {\n    elements: elements,\n    onElementClick: onElementClick,\n    onElementsRemove: onElementsRemove,\n    onConnect: onConnect,\n    onNodeDragStop: onNodeDragStop,\n    style: {\n      background: bgColor\n    },\n    onLoad: onLoad,\n    nodeTypes: nodeTypes,\n    connectionLineStyle: connectionLineStyle,\n    snapToGrid: true,\n    snapGrid: snapGrid,\n    defaultZoom: 1.5,\n    children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n      nodeStrokeColor: n => {\n        if (n.type === 'input') return '#0041d0';\n        if (n.type === 'selectorNode') return bgColor;\n        if (n.type === 'output') return '#ff0072';\n      },\n      nodeColor: n => {\n        if (n.type === 'selectorNode') return bgColor;\n        return '#fff';\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomNodeFlow, \"8Tpf+NXwLRA2naCu0a5NFddTUTo=\");\n\n_c = CustomNodeFlow;\nexport default CustomNodeFlow;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomNodeFlow\");","map":{"version":3,"sources":["C:/Users/Shaft/Desktop/flow/flowgen2/src/Components/CustomNode.js"],"names":["React","useState","useEffect","ReactFlow","isEdge","removeElements","addEdge","MiniMap","Controls","ColorSelectorNode","onLoad","reactFlowInstance","console","log","setTimeout","fitView","onNodeDragStop","event","node","onElementClick","element","initBgColor","connectionLineStyle","stroke","snapGrid","nodeTypes","selectorNode","CustomNodeFlow","elements","setElements","bgColor","setBgColor","onChange","els","map","e","id","color","target","value","data","type","label","position","x","y","sourcePosition","style","border","padding","targetPosition","source","animated","sourceHandle","onElementsRemove","elementsToRemove","onConnect","params","background","n"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,IACEC,MADF,EAEEC,cAFF,EAGEC,OAHF,EAIEC,OAJF,EAKEC,QALF,QAMO,qBANP;AAOA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAO,cAAP;;AACA,MAAMC,MAAM,GAAIC,iBAAD,IAAuB;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,iBAA5B;AACAG,EAAAA,UAAU,CAAC,MAAMH,iBAAiB,CAACI,OAAlB,EAAP,EAAoC,CAApC,CAAV;AACD,CAHD;;AAIA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiBN,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBK,IAAzB,CAAxC;;AACA,MAAMC,cAAc,GAAG,CAACF,KAAD,EAAQG,OAAR,KAAoBR,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBO,OAArB,CAA3C;;AACA,MAAMC,WAAW,GAAG,SAApB;AACA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA5B;AACA,MAAMC,QAAQ,GAAG,CAAC,EAAD,EAAK,EAAL,CAAjB;AACA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,YAAY,EAAEjB;AADE,CAAlB;;AAGA,MAAMkB,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC6B,OAAD,EAAUC,UAAV,IAAwB9B,QAAQ,CAACoB,WAAD,CAAtC;AACAnB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8B,QAAQ,GAAIf,KAAD,IAAW;AAC1BY,MAAAA,WAAW,CAAEI,GAAD,IACVA,GAAG,CAACC,GAAJ,CAASC,CAAD,IAAO;AACb,YAAI/B,MAAM,CAAC+B,CAAD,CAAN,IAAaA,CAAC,CAACC,EAAF,KAAS,GAA1B,EAA+B;AAC7B,iBAAOD,CAAP;AACD;;AACD,cAAME,KAAK,GAAGpB,KAAK,CAACqB,MAAN,CAAaC,KAA3B;AACAR,QAAAA,UAAU,CAACM,KAAD,CAAV;AACA,eAAO,EACL,GAAGF,CADE;AAELK,UAAAA,IAAI,EAAE,EACJ,GAAGL,CAAC,CAACK,IADD;AAEJH,YAAAA;AAFI;AAFD,SAAP;AAOD,OAbD,CADS,CAAX;AAgBD,KAjBD;;AAkBAR,IAAAA,WAAW,CAAC,CACV;AACEO,MAAAA,EAAE,EAAE,GADN;AAEEK,MAAAA,IAAI,EAAE,OAFR;AAGED,MAAAA,IAAI,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAHR;AAIEC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAJZ;AAKEC,MAAAA,cAAc,EAAE;AALlB,KADU,EAQV;AACEV,MAAAA,EAAE,EAAE,GADN;AAEEK,MAAAA,IAAI,EAAE,cAFR;AAGED,MAAAA,IAAI,EAAE;AAAER,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBK,QAAAA,KAAK,EAAEhB;AAA7B,OAHR;AAIE0B,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,gBAAV;AAA4BC,QAAAA,OAAO,EAAE;AAArC,OAJT;AAKEN,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE;AAAb;AALZ,KARU,EAeV;AACET,MAAAA,EAAE,EAAE,GADN;AAEEK,MAAAA,IAAI,EAAE,QAFR;AAGED,MAAAA,IAAI,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAHR;AAIEC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE;AAAb,OAJZ;AAKEK,MAAAA,cAAc,EAAE;AALlB,KAfU,EAsBV;AACEd,MAAAA,EAAE,EAAE,GADN;AAEEK,MAAAA,IAAI,EAAE,QAFR;AAGED,MAAAA,IAAI,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAHR;AAIEC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE;AAAb,OAJZ;AAKEK,MAAAA,cAAc,EAAE;AALlB,KAtBU,EA6BV;AACEd,MAAAA,EAAE,EAAE,MADN;AAEEe,MAAAA,MAAM,EAAE,GAFV;AAGEb,MAAAA,MAAM,EAAE,GAHV;AAIEc,MAAAA,QAAQ,EAAE,IAJZ;AAKEL,MAAAA,KAAK,EAAE;AAAExB,QAAAA,MAAM,EAAE;AAAV;AALT,KA7BU,EAoCV;AACEa,MAAAA,EAAE,EAAE,OADN;AAEEe,MAAAA,MAAM,EAAE,GAFV;AAGEb,MAAAA,MAAM,EAAE,GAHV;AAIEe,MAAAA,YAAY,EAAE,GAJhB;AAKED,MAAAA,QAAQ,EAAE,IALZ;AAMEL,MAAAA,KAAK,EAAE;AAAExB,QAAAA,MAAM,EAAE;AAAV;AANT,KApCU,EA4CV;AACEa,MAAAA,EAAE,EAAE,OADN;AAEEe,MAAAA,MAAM,EAAE,GAFV;AAGEb,MAAAA,MAAM,EAAE,GAHV;AAIEe,MAAAA,YAAY,EAAE,GAJhB;AAKED,MAAAA,QAAQ,EAAE,IALZ;AAMEL,MAAAA,KAAK,EAAE;AAAExB,QAAAA,MAAM,EAAE;AAAV;AANT,KA5CU,CAAD,CAAX;AAqDD,GAxEQ,EAwEN,EAxEM,CAAT;;AAyEA,QAAM+B,gBAAgB,GAAIC,gBAAD,IACvB1B,WAAW,CAAEI,GAAD,IAAS5B,cAAc,CAACkD,gBAAD,EAAmBtB,GAAnB,CAAxB,CADb;;AAEA,QAAMuB,SAAS,GAAIC,MAAD,IAChB5B,WAAW,CAAEI,GAAD,IACV3B,OAAO,CAAC,EAAE,GAAGmD,MAAL;AAAaL,IAAAA,QAAQ,EAAE,IAAvB;AAA6BL,IAAAA,KAAK,EAAE;AAAExB,MAAAA,MAAM,EAAE;AAAV;AAApC,GAAD,EAA2DU,GAA3D,CADE,CADb;;AAIA,sBACE,QAAC,SAAD;AACE,IAAA,QAAQ,EAAEL,QADZ;AAEE,IAAA,cAAc,EAAET,cAFlB;AAGE,IAAA,gBAAgB,EAAEmC,gBAHpB;AAIE,IAAA,SAAS,EAAEE,SAJb;AAKE,IAAA,cAAc,EAAExC,cALlB;AAME,IAAA,KAAK,EAAE;AAAE0C,MAAAA,UAAU,EAAE5B;AAAd,KANT;AAOE,IAAA,MAAM,EAAEpB,MAPV;AAQE,IAAA,SAAS,EAAEe,SARb;AASE,IAAA,mBAAmB,EAAEH,mBATvB;AAUE,IAAA,UAAU,EAAE,IAVd;AAWE,IAAA,QAAQ,EAAEE,QAXZ;AAYE,IAAA,WAAW,EAAE,GAZf;AAAA,4BAcE,QAAC,OAAD;AACE,MAAA,eAAe,EAAGmC,CAAD,IAAO;AACtB,YAAIA,CAAC,CAAClB,IAAF,KAAW,OAAf,EAAwB,OAAO,SAAP;AACxB,YAAIkB,CAAC,CAAClB,IAAF,KAAW,cAAf,EAA+B,OAAOX,OAAP;AAC/B,YAAI6B,CAAC,CAAClB,IAAF,KAAW,QAAf,EAAyB,OAAO,SAAP;AAC1B,OALH;AAME,MAAA,SAAS,EAAGkB,CAAD,IAAO;AAChB,YAAIA,CAAC,CAAClB,IAAF,KAAW,cAAf,EAA+B,OAAOX,OAAP;AAC/B,eAAO,MAAP;AACD;AATH;AAAA;AAAA;AAAA;AAAA,YAdF,eAyBE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CA/GD;;GAAMH,c;;KAAAA,c;AAgHN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactFlow, {\r\n  isEdge,\r\n  removeElements,\r\n  addEdge,\r\n  MiniMap,\r\n  Controls,\r\n} from 'react-flow-renderer';\r\nimport ColorSelectorNode from './ColorSelectorNode';\r\nimport '../index.css';\r\nconst onLoad = (reactFlowInstance) => {\r\n  console.log('flow loaded:', reactFlowInstance);\r\n  setTimeout(() => reactFlowInstance.fitView(), 1);\r\n};\r\nconst onNodeDragStop = (event, node) => console.log('drag stop', node);\r\nconst onElementClick = (event, element) => console.log('click', element);\r\nconst initBgColor = '#1A192B';\r\nconst connectionLineStyle = { stroke: '#fff' };\r\nconst snapGrid = [20, 20];\r\nconst nodeTypes = {\r\n  selectorNode: ColorSelectorNode,\r\n};\r\nconst CustomNodeFlow = () => {\r\n  const [elements, setElements] = useState([]);\r\n  const [bgColor, setBgColor] = useState(initBgColor);\r\n  useEffect(() => {\r\n    const onChange = (event) => {\r\n      setElements((els) =>\r\n        els.map((e) => {\r\n          if (isEdge(e) || e.id !== '2') {\r\n            return e;\r\n          }\r\n          const color = event.target.value;\r\n          setBgColor(color);\r\n          return {\r\n            ...e,\r\n            data: {\r\n              ...e.data,\r\n              color,\r\n            },\r\n          };\r\n        })\r\n      );\r\n    };\r\n    setElements([\r\n      {\r\n        id: '1',\r\n        type: 'input',\r\n        data: { label: 'An input node' },\r\n        position: { x: 0, y: 50 },\r\n        sourcePosition: 'right',\r\n      },\r\n      {\r\n        id: '2',\r\n        type: 'selectorNode',\r\n        data: { onChange: onChange, color: initBgColor },\r\n        style: { border: '1px solid #777', padding: 10 },\r\n        position: { x: 300, y: 50 },\r\n      },\r\n      {\r\n        id: '3',\r\n        type: 'output',\r\n        data: { label: 'Output A' },\r\n        position: { x: 650, y: 25 },\r\n        targetPosition: 'left',\r\n      },\r\n      {\r\n        id: '4',\r\n        type: 'output',\r\n        data: { label: 'Output B' },\r\n        position: { x: 650, y: 100 },\r\n        targetPosition: 'left',\r\n      },\r\n      {\r\n        id: 'e1-2',\r\n        source: '1',\r\n        target: '2',\r\n        animated: true,\r\n        style: { stroke: '#fff' },\r\n      },\r\n      {\r\n        id: 'e2a-3',\r\n        source: '2',\r\n        target: '3',\r\n        sourceHandle: 'a',\r\n        animated: true,\r\n        style: { stroke: '#fff' },\r\n      },\r\n      {\r\n        id: 'e2b-4',\r\n        source: '2',\r\n        target: '4',\r\n        sourceHandle: 'b',\r\n        animated: true,\r\n        style: { stroke: '#fff' },\r\n      },\r\n    ]);\r\n  }, []);\r\n  const onElementsRemove = (elementsToRemove) =>\r\n    setElements((els) => removeElements(elementsToRemove, els));\r\n  const onConnect = (params) =>\r\n    setElements((els) =>\r\n      addEdge({ ...params, animated: true, style: { stroke: '#fff' } }, els)\r\n    );\r\n  return (\r\n    <ReactFlow\r\n      elements={elements}\r\n      onElementClick={onElementClick}\r\n      onElementsRemove={onElementsRemove}\r\n      onConnect={onConnect}\r\n      onNodeDragStop={onNodeDragStop}\r\n      style={{ background: bgColor }}\r\n      onLoad={onLoad}\r\n      nodeTypes={nodeTypes}\r\n      connectionLineStyle={connectionLineStyle}\r\n      snapToGrid={true}\r\n      snapGrid={snapGrid}\r\n      defaultZoom={1.5}\r\n    >\r\n      <MiniMap\r\n        nodeStrokeColor={(n) => {\r\n          if (n.type === 'input') return '#0041d0';\r\n          if (n.type === 'selectorNode') return bgColor;\r\n          if (n.type === 'output') return '#ff0072';\r\n        }}\r\n        nodeColor={(n) => {\r\n          if (n.type === 'selectorNode') return bgColor;\r\n          return '#fff';\r\n        }}\r\n      />\r\n      <Controls />\r\n    </ReactFlow>\r\n  );\r\n};\r\nexport default CustomNodeFlow;"]},"metadata":{},"sourceType":"module"}