{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Shaft\\\\Desktop\\\\flow\\\\flowgen2\\\\src\\\\Components\\\\Basic2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, getBezierPath, getMarkerEnd } from 'react-flow-renderer';\nconst initialElements = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'Mind Node'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}];\n\nconst onLoad = reactFlowInstance => {\n  reactFlowInstance.fitView();\n};\n\nconst Card = () => {\n  _s();\n\n  const [elements, setElements] = useState(initialElements); //const [elements, setElements] = useState([]);\n\n  const [lastId, setLastId] = useState(1);\n  const [name, setName] = useState(\"\");\n  const [text, setText] = useState(\"blank\");\n\n  const addNode = () => {\n    setElements(e => e.concat({\n      //id: (e.length + 1).toString(),\n      id: lastId + 1,\n      data: {\n        label: `${name}`\n      },\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }\n    }));\n  };\n\n  const addNode2 = () => {\n    var lId = parseInt(`${lastId}`);\n    setText(lId);\n    setLastId(lId + 1);\n    setElements(e => e.concat({\n      //id: (e.length + 1).toString(),\n      id: lId + 1,\n      data: {\n        label: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Hello\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 28\n        }, this)\n      },\n      //position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\n      position: e[0].position\n    }));\n  };\n\n  const getImageNode = () => {};\n\n  const onConnect = params => {\n    setText(params.source.toString() + params.target.toString()); //setElements(e => e.concat());\n    //addEdge(params, e));\n  }; //const onConnect = (params) => setElements(e => addEdge(params,e));\n\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: elements,\n      onLoad: onLoad,\n      style: {\n        width: '100%',\n        height: '90vh'\n      },\n      onConnect: onConnect,\n      connectionLineStyle: {\n        stroke: \"#ddd\",\n        strokeWidth: 2\n      },\n      connectionLineType: \"bezier\",\n      snapToGrid: true,\n      snapGrid: [16, 16],\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#888\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setName(e.target.value),\n        name: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addNode2,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Card, \"ajy323rFMA+PjB3TIhtdfWZjczY=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["C:/Users/Shaft/Desktop/flow/flowgen2/src/Components/Basic2.js"],"names":["React","useState","Fragment","ReactFlow","addEdge","Background","Controls","MiniMap","getBezierPath","getMarkerEnd","initialElements","id","type","data","label","position","x","y","onLoad","reactFlowInstance","fitView","Card","elements","setElements","lastId","setLastId","name","setName","text","setText","addNode","e","concat","Math","random","window","innerWidth","innerHeight","addNode2","lId","parseInt","getImageNode","onConnect","params","source","toString","target","width","height","stroke","strokeWidth","value"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react';\r\n\r\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, getBezierPath, getMarkerEnd } from 'react-flow-renderer';\r\n\r\nconst initialElements = [\r\n    { id: '1', type: 'input', data: { label: 'Mind Node' }, position: { x: 0, y: 0 } }\r\n]\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst Card = () => {\r\n\r\n    const [elements, setElements] = useState(initialElements);\r\n    //const [elements, setElements] = useState([]);\r\n    const [lastId, setLastId] = useState(1);\r\n    const [name, setName] = useState(\"\")\r\n    const [text, setText] = useState(\"blank\");\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            //id: (e.length + 1).toString(),\r\n            id: lastId +1,\r\n            data: { label: `${name}` },\r\n            position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n        }));\r\n    };\r\n    const addNode2 = () => {\r\n        var lId = parseInt(`${lastId}`);\r\n        setText(lId);\r\n        setLastId(lId + 1);\r\n        setElements(e => e.concat({\r\n            //id: (e.length + 1).toString(),\r\n            id: lId +1,\r\n            data: { label: <div><h1>Hello</h1></div> },\r\n            //position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n            position: e[0].position\r\n        }));\r\n    };\r\n\r\n    const getImageNode = ()=>{\r\n\r\n    };\r\n\r\n    const onConnect = (params) => {\r\n        setText(params.source.toString() + params.target.toString());\r\n        //setElements(e => e.concat());\r\n        //addEdge(params, e));\r\n    }\r\n    //const onConnect = (params) => setElements(e => addEdge(params,e));\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{ width: '100%', height: '90vh' }}\r\n                onConnect={onConnect}\r\n                connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n                connectionLineType=\"bezier\"\r\n                snapToGrid={true}\r\n                snapGrid={[16, 16]}\r\n            >\r\n                <Background color=\"#888\" gap={16} />\r\n                <MiniMap />\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            <div>\r\n                <input type=\"text\"\r\n                    onChange={e => setName(e.target.value)}\r\n                    name=\"title\" />\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={addNode}\r\n                >Add Node</button>\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={addNode2}\r\n                >Add Node</button>\r\n                <h1>{text}</h1>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Card;"]},"metadata":{},"sourceType":"module"}