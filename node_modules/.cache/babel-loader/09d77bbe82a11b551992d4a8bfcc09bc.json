{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Shaft\\\\Desktop\\\\flow\\\\flowgen2\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Basic from './Components/Basic';\nimport Basic2 from './Components/Basic2';\nimport Basic3 from './Components/Basic3';\nimport ReactFlow from 'react-flow-renderer';\nimport CustomNodeFlow from './Components/CustomNode';\nimport SideBar from './Components/Sidebar';\nimport React, { useState, Fragment } from 'react';\nimport Mix from './Components/Mix';\nimport firebase from './firebase/firebase';\nconst initialElements = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'Mind Node'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}];\n\nfunction App() {\n  _s();\n\n  //const [elements, setElements] = useState(initialElements);\n  const allInputs = {\n    imgUrl: ''\n  };\n  const [imageAsFile, setImageAsFile] = useState('');\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs);\n  console.log(imageAsFile);\n\n  const handleImageAsFile = e => {\n    const image = e.target.files[0];\n    setImageAsFile(imageFile => image);\n  };\n\n  const handleFireBaseUpload = e => {\n    e.preventDefault();\n    console.log('start of upload'); // async magic goes here...\n\n    if (imageAsFile === '') {\n      console.error(`not an image, the image file is a ${typeof imageAsFile}`);\n    }\n\n    const uploadTask = firebase.storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile); //initiates the firebase side uploading \n\n    uploadTask.on('state_changed', snapShot => {\n      //takes a snap shot of the process as it is happening\n      console.log(snapShot);\n    }, err => {\n      //catches the errors\n      console.log(err);\n    }, () => {\n      // gets the functions from storage refences the image storage in firebase by the children\n      // gets the download url then sets the image from firebase as the value for the imgUrl key:\n      firebase.storage.ref('images').child(imageAsFile.name).getDownloadURL().then(fireBaseUrl => {\n        setImageAsUrl(prevObject => ({ ...prevObject,\n          imgUrl: fireBaseUrl\n        }));\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFireBaseUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleImageAsFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"upload to firebase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageAsUrl.imgUrl,\n      alt: \"image tag\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"+dRI+LLv1QitbwUZXPO7P+9pfqE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Shaft/Desktop/flow/flowgen2/src/App.js"],"names":["Basic","Basic2","Basic3","ReactFlow","CustomNodeFlow","SideBar","React","useState","Fragment","Mix","firebase","initialElements","id","type","data","label","position","x","y","App","allInputs","imgUrl","imageAsFile","setImageAsFile","imageAsUrl","setImageAsUrl","console","log","handleImageAsFile","e","image","target","files","imageFile","handleFireBaseUpload","preventDefault","error","uploadTask","storage","ref","name","put","on","snapShot","err","child","getDownloadURL","then","fireBaseUrl","prevObject"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Basic from './Components/Basic';\nimport Basic2 from './Components/Basic2';\nimport Basic3 from './Components/Basic3';\nimport ReactFlow from 'react-flow-renderer';\nimport CustomNodeFlow from './Components/CustomNode';\nimport SideBar from './Components/Sidebar';\nimport React, { useState, Fragment } from 'react';\nimport Mix from './Components/Mix';\nimport firebase from './firebase/firebase';\nconst initialElements = [\n  { id: '1', type: 'input', data: { label: 'Mind Node' }, position: { x: 0, y: 0 } }\n]\n\nfunction App() {\n  //const [elements, setElements] = useState(initialElements);\n  const allInputs = { imgUrl: '' }\n  const [imageAsFile, setImageAsFile] = useState('')\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs)\n\n  console.log(imageAsFile)\n  const handleImageAsFile = (e) => {\n    const image = e.target.files[0]\n    setImageAsFile(imageFile => (image))\n  }\n  const handleFireBaseUpload = e => {\n    e.preventDefault()\n    console.log('start of upload')\n    // async magic goes here...\n    if (imageAsFile === '') {\n      console.error(`not an image, the image file is a ${typeof (imageAsFile)}`)\n    }\n    const uploadTask = firebase.storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile)\n    //initiates the firebase side uploading \n    uploadTask.on('state_changed',\n      (snapShot) => {\n        //takes a snap shot of the process as it is happening\n        console.log(snapShot)\n      }, (err) => {\n        //catches the errors\n        console.log(err)\n      }, () => {\n        // gets the functions from storage refences the image storage in firebase by the children\n        // gets the download url then sets the image from firebase as the value for the imgUrl key:\n        firebase.storage.ref('images').child(imageAsFile.name).getDownloadURL()\n          .then(fireBaseUrl => {\n            setImageAsUrl(prevObject => ({ ...prevObject, imgUrl: fireBaseUrl }))\n          })\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        //<CustomNodeFlow/>\n        //<Mix/>\n        //<Basic2/>\n      }\n      <form onSubmit={handleFireBaseUpload}>\n        <input\n          type=\"file\"\n          onChange={handleImageAsFile}\n        />\n        <button>upload to firebase</button>\n      </form>\n      <img src={imageAsUrl.imgUrl} alt=\"image tag\" />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}