{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Shaft\\\\Desktop\\\\flow\\\\flowgen2\\\\src\\\\Components\\\\Mix.js\",\n    _s = $RefreshSig$();\n\n//import logo from './logo.svg';\nimport '../App.css'; //import Basic from './Components/Basic';\n//import Basic2 from './Components/Basic2';\n\nimport Basic3 from './Basic3'; //import ReactFlow from 'react-flow-renderer';\n//import CustomNodeFlow from './Components/CustomNode';\n\nimport SideBar from './Sidebar';\nimport React, { useState, Fragment } from 'react';\n\nconst Mix = () => {\n  _s();\n\n  const [elements, setElements] = useState(initialElements); //const [elements, setElements] = useState([]);\n\n  const [lastId, setLastId] = useState(1);\n  const [name, setName] = useState(\"\");\n  const [text, setText] = useState(\"blank\");\n  const [removingId, setRemovingId] = useState(0);\n\n  const addNode = () => {\n    setElements(e => e.concat({\n      //id: (e.length + 1).toString(),\n      id: lastId + 1,\n      data: {\n        label: `${name}`\n      },\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }\n    }));\n  };\n\n  const addNode2 = () => {\n    var lId = parseInt(`${lastId}`);\n    var node = getImageNode(lId + 1);\n    setText(lId);\n    setLastId(lId + 1);\n    setElements(e => e.concat({\n      //id: (e.length + 1).toString(),\n      id: lId + 1,\n      //data: { label: <div><h1>Hello</h1></div> },\n      data: {\n        label: node\n      },\n      //position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\n      position: {\n        x: e[0].position.x + 50,\n        y: e[0].position.y + 50\n      }\n    }));\n  };\n\n  const onRemove = nid => {\n    //alert(nid.toString());\n    //setText(\"removing\" + nid.toString());\n    var newarr = elements.filter(element => element.id !== nid);\n    setElements(newarr);\n  };\n\n  const getImageNode = nid => {\n    var x = nid.toString();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Node \", nid]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => onRemove(x),\n        children: \"Click\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 16\n    }, this);\n  };\n\n  const onConnect = params => {\n    //setText(params.source.toString() + params.target.toString());\n    var i = 'e' + params.source.toString() + '-' + params.target.toString();\n    var s = params.source.toString();\n    var t = params.target.toString();\n    setElements(e => e.concat({\n      id: i,\n      source: s,\n      target: t,\n      animated: true\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: elements,\n      onLoad: onLoad,\n      style: {\n        width: '100%',\n        height: '90vh'\n      },\n      onConnect: onConnect,\n      connectionLineStyle: {\n        stroke: \"#ddd\",\n        strokeWidth: 2\n      },\n      connectionLineType: \"bezier\",\n      snapToGrid: true,\n      snapGrid: [16, 16],\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#888\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setName(e.target.value),\n        name: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addNode2,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Mix, \"Pt+v4N8GD/nwOlPMeeoCKMES5Og=\");\n\n_c = Mix;\nexport default Mix;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mix\");","map":{"version":3,"sources":["C:/Users/Shaft/Desktop/flow/flowgen2/src/Components/Mix.js"],"names":["Basic3","SideBar","React","useState","Fragment","Mix","elements","setElements","initialElements","lastId","setLastId","name","setName","text","setText","removingId","setRemovingId","addNode","e","concat","id","data","label","position","x","Math","random","window","innerWidth","y","innerHeight","addNode2","lId","parseInt","node","getImageNode","onRemove","nid","newarr","filter","element","toString","onConnect","params","i","source","target","s","t","animated","onLoad","width","height","stroke","strokeWidth","value"],"mappings":";;;;;AAAA;AACA,OAAO,YAAP,C,CACA;AACA;;AACA,OAAOA,MAAP,MAAmB,UAAnB,C,CACA;AACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEd,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAACK,eAAD,CAAxC,CAFc,CAGd;;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,OAAD,CAAhC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,CAAD,CAA5C;;AAEA,QAAMc,OAAO,GAAG,MAAM;AAClBV,IAAAA,WAAW,CAACW,CAAC,IAAIA,CAAC,CAACC,MAAF,CAAS;AACtB;AACAC,MAAAA,EAAE,EAAEX,MAAM,GAAE,CAFU;AAGtBY,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAG,GAAEX,IAAK;AAAjB,OAHgB;AAItBY,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,CAAC,EAAEC,IAAI,CAACC,MAAL,KAAgBC,MAAM,CAACC,UAA5B;AAAwCC,QAAAA,CAAC,EAAEJ,IAAI,CAACC,MAAL,KAAgBC,MAAM,CAACG;AAAlE;AAJY,KAAT,CAAN,CAAX;AAMH,GAPD;;AAQA,QAAMC,QAAQ,GAAG,MAAM;AACnB,QAAIC,GAAG,GAAGC,QAAQ,CAAE,GAAExB,MAAO,EAAX,CAAlB;AACA,QAAIyB,IAAI,GAAGC,YAAY,CAACH,GAAG,GAAG,CAAP,CAAvB;AACAlB,IAAAA,OAAO,CAACkB,GAAD,CAAP;AACAtB,IAAAA,SAAS,CAACsB,GAAG,GAAG,CAAP,CAAT;AACAzB,IAAAA,WAAW,CAACW,CAAC,IAAIA,CAAC,CAACC,MAAF,CAAS;AACtB;AACAC,MAAAA,EAAE,EAAEY,GAAG,GAAE,CAFa;AAGtB;AACAX,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAEY;AAAT,OAJgB;AAKtB;AACAX,MAAAA,QAAQ,EAAE;AAACC,QAAAA,CAAC,EAAEN,CAAC,CAAC,CAAD,CAAD,CAAKK,QAAL,CAAcC,CAAd,GAAkB,EAAtB;AAA0BK,QAAAA,CAAC,EAAEX,CAAC,CAAC,CAAD,CAAD,CAAKK,QAAL,CAAcM,CAAd,GAAkB;AAA/C;AANY,KAAT,CAAN,CAAX;AAQH,GAbD;;AAcA,QAAMO,QAAQ,GAAIC,GAAD,IAAS;AACtB;AACA;AACA,QAAIC,MAAM,GAAGhC,QAAQ,CAACiC,MAAT,CAAgBC,OAAO,IAAIA,OAAO,CAACpB,EAAR,KAAeiB,GAA1C,CAAb;AACA9B,IAAAA,WAAW,CAAC+B,MAAD,CAAX;AACH,GALD;;AAMA,QAAMH,YAAY,GAAIE,GAAD,IAAS;AAC1B,QAAIb,CAAC,GAAGa,GAAG,CAACI,QAAJ,EAAR;AACA,wBAAO;AAAA,8BACH;AAAA,4BAAUJ,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAEH;AAAQ,QAAA,OAAO,EAAEnB,CAAC,IAAEkB,QAAQ,CAACZ,CAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAIH,GAND;;AAQA,QAAMkB,SAAS,GAAIC,MAAD,IAAY;AAC1B;AACA,QAAIC,CAAC,GAAG,MAAMD,MAAM,CAACE,MAAP,CAAcJ,QAAd,EAAN,GAAiC,GAAjC,GAAuCE,MAAM,CAACG,MAAP,CAAcL,QAAd,EAA/C;AACA,QAAIM,CAAC,GAAGJ,MAAM,CAACE,MAAP,CAAcJ,QAAd,EAAR;AACA,QAAIO,CAAC,GAAGL,MAAM,CAACG,MAAP,CAAcL,QAAd,EAAR;AACAlC,IAAAA,WAAW,CAACW,CAAC,IAAIA,CAAC,CAACC,MAAF,CAAS;AACtBC,MAAAA,EAAE,EAAEwB,CADkB;AAEtBC,MAAAA,MAAM,EAAEE,CAFc;AAGtBD,MAAAA,MAAM,EAAEE,CAHc;AAItBC,MAAAA,QAAQ,EAAE;AAJY,KAAT,CAAN,CAAX;AAKH,GAVD;;AAYA,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,SAAD;AACI,MAAA,QAAQ,EAAE3C,QADd;AAEI,MAAA,MAAM,EAAE4C,MAFZ;AAGI,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAHX;AAII,MAAA,SAAS,EAAEV,SAJf;AAKI,MAAA,mBAAmB,EAAE;AAAEW,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,WAAW,EAAE;AAA/B,OALzB;AAMI,MAAA,kBAAkB,EAAC,QANvB;AAOI,MAAA,UAAU,EAAE,IAPhB;AAQI,MAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CARd;AAAA,8BAUI,QAAC,UAAD;AAAY,QAAA,KAAK,EAAC,MAAlB;AAAyB,QAAA,GAAG,EAAE;AAA9B;AAAA;AAAA;AAAA;AAAA,cAVJ,eAWI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAXJ,eAYI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAgBI;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AACI,QAAA,QAAQ,EAAEpC,CAAC,IAAIN,OAAO,CAACM,CAAC,CAAC4B,MAAF,CAASS,KAAV,CAD1B;AAEI,QAAA,IAAI,EAAC;AAFT;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,OAAO,EAAEtC,OAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAQI;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,OAAO,EAAEc,QAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ,eAYI;AAAA,kBAAKlB;AAAL;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkCH,CA3FD;;GAAMR,G;;KAAAA,G;AA6FN,eAAeA,GAAf","sourcesContent":["//import logo from './logo.svg';\r\nimport '../App.css';\r\n//import Basic from './Components/Basic';\r\n//import Basic2 from './Components/Basic2';\r\nimport Basic3 from './Basic3';\r\n//import ReactFlow from 'react-flow-renderer';\r\n//import CustomNodeFlow from './Components/CustomNode';\r\nimport SideBar from './Sidebar';\r\nimport React, { useState, Fragment } from 'react';\r\n\r\nconst Mix = () => {\r\n\r\n    const [elements, setElements] = useState(initialElements);\r\n    //const [elements, setElements] = useState([]);\r\n    const [lastId, setLastId] = useState(1);\r\n    const [name, setName] = useState(\"\")\r\n    const [text, setText] = useState(\"blank\");\r\n    const [removingId, setRemovingId] = useState(0);\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            //id: (e.length + 1).toString(),\r\n            id: lastId +1,\r\n            data: { label: `${name}` },\r\n            position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n        }));\r\n    };\r\n    const addNode2 = () => {\r\n        var lId = parseInt(`${lastId}`);\r\n        var node = getImageNode(lId + 1);\r\n        setText(lId);\r\n        setLastId(lId + 1);\r\n        setElements(e => e.concat({\r\n            //id: (e.length + 1).toString(),\r\n            id: lId +1,\r\n            //data: { label: <div><h1>Hello</h1></div> },\r\n            data: { label: node },\r\n            //position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n            position: {x: e[0].position.x + 50, y: e[0].position.y + 50}\r\n        }));\r\n    };\r\n    const onRemove = (nid) => {\r\n        //alert(nid.toString());\r\n        //setText(\"removing\" + nid.toString());\r\n        var newarr = elements.filter(element => element.id !== nid);\r\n        setElements(newarr);\r\n    };\r\n    const getImageNode = (nid) => {\r\n        var x = nid.toString();\r\n        return <div>\r\n            <h3>Node {nid}</h3>\r\n            <button onClick={e=>onRemove(x)}>Click</button>\r\n        </div>\r\n    };\r\n\r\n    const onConnect = (params) => {\r\n        //setText(params.source.toString() + params.target.toString());\r\n        var i = 'e' + params.source.toString() + '-' + params.target.toString();\r\n        var s = params.source.toString();\r\n        var t = params.target.toString();\r\n        setElements(e => e.concat({ \r\n            id: i, \r\n            source: s, \r\n            target: t, \r\n            animated: true }));\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{ width: '100%', height: '90vh' }}\r\n                onConnect={onConnect}\r\n                connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n                connectionLineType=\"bezier\"\r\n                snapToGrid={true}\r\n                snapGrid={[16, 16]}\r\n            >\r\n                <Background color=\"#888\" gap={16} />\r\n                <MiniMap />\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            <div>\r\n                <input type=\"text\"\r\n                    onChange={e => setName(e.target.value)}\r\n                    name=\"title\" />\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={addNode}\r\n                >Add Node</button>\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={addNode2}\r\n                >Add Node</button>\r\n                <h1>{text}</h1>\r\n            </div>\r\n            \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Mix;\r\n"]},"metadata":{},"sourceType":"module"}